from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from FSM.all import *

from database.filtrs import *
from database.users import *

from keyboards.settings_keyboards import *

router = Router()

@router.callback_query(F.data == "settings")
async def settings_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=settings_kb
    )
    await callback.answer()

@router.callback_query(F.data == "settings_filters")
async def settings_filters_menu(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_filter = await get_filter_by_user(user_id)
    text = "üîé <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:</b>\n\n"
    if user_filter:
        games = user_filter.get("games", [])
        from database.games import get_game_by_name
        existing_games = []
        for game in games:
            if await get_game_by_name(game):
                existing_games.append(game)
        games = existing_games

        gender = user_filter.get("gender", "any")
        age = user_filter.get("age", "any")

        games_str = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ" if not games else ", ".join(games)
        gender_str = (
            "–õ—é–±–æ–π" if gender == "any" else
            "–ú—É–∂—Å–∫–æ–π" if gender == "male" else
            "–ñ–µ–Ω—Å–∫–∏–π" if gender == "female" else gender
        )
        age_str = "–õ—é–±–æ–π" if age == "any" else str(age)

        text += (
            f"üéÆ <b>–ò–≥—Ä—ã:</b> {games_str}\n"
            f"üßë <b>–ü–æ–ª:</b> {gender_str}\n"
            f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age_str}\n"
        )
    else:
        text += "–§–∏–ª—å—Ç—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).\n"

    text += "\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="edit_filter")],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data="reset_filter")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "edit_filter")
async def edit_filter_menu(callback: CallbackQuery, state: FSMContext):
    text = (
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="edit_filter_games")],
            [InlineKeyboardButton(text="üßë –ü–æ–ª", callback_data="edit_filter_gender")],
            [InlineKeyboardButton(text="üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_filter_age")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_filters")]
        ]
    )
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "edit_filter_games")
async def edit_filter_games_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_filter = await get_filter_by_user(user_id)
    all_games = await get_all_games()
    selected_games = user_filter.get("games", []) if user_filter else []
    games_ranks = user_filter.get("games_ranks", {}) if user_filter else {}
    await state.update_data(
        all_games=[g["game_name"] for g in all_games],
        games=selected_games,
        games_ranks=games_ranks,
        current_game_idx=0
    )
    await state.set_state(FilterFSM.games)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ª–µ–Ω—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=("‚úÖ " if g["game_name"] in selected_games else "") + g["game_name"],
                    callback_data=f"toggle_game_{g['game_name']}"
                )] for g in all_games
            ] + [[InlineKeyboardButton(text="üéØ –ì–æ—Ç–æ–≤–æ", callback_data="games_selected_done")]]
        ),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(FilterFSM.games)
async def edit_filter_choose_games(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    all_games = data.get("all_games", [])
    selected_games = data.get("games", [])
    games_ranks = data.get("games_ranks", {})
    if callback.data.startswith("toggle_game_"):
        game = callback.data.replace("toggle_game_", "")
        if game in selected_games:
            selected_games.remove(game)
            games_ranks.pop(game, None)
        else:
            selected_games.append(game)
        await state.update_data(games=selected_games, games_ranks=games_ranks)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ª–µ–Ω—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=("‚úÖ " if g in selected_games else "") + g,
                        callback_data=f"toggle_game_{g}"
                    )] for g in all_games
                ] + [[InlineKeyboardButton(text="üéØ –ì–æ—Ç–æ–≤–æ", callback_data="games_selected_done")]]
            ),
            parse_mode="HTML"
        )
        await callback.answer()
    elif callback.data == "games_selected_done":
        if not selected_games:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É!", show_alert=True)
            return
        await state.set_state(FilterFSM.ranks)
        await state.update_data(current_game_idx=0)
        game_name = selected_games[0]
        game = await get_game_by_name(game_name)
        ranks = game.get("ranks", []) if game else []
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥–∏ –¥–ª—è –∏–≥—Ä—ã <b>{game_name}</b> (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=get_ranks_keyboard(game_name, ranks, games_ranks.get(game_name, []))
        )
        await callback.answer()

@router.callback_query(FilterFSM.ranks)
async def edit_filter_choose_ranks(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_games = data.get("games", [])
    games_ranks = data.get("games_ranks", {})
    idx = data.get("current_game_idx", 0)
    game_name = selected_games[idx]
    game = await get_game_by_name(game_name)
    ranks = game.get("ranks", []) if game else []
    selected_ranks = games_ranks.get(game_name, [])

    if callback.data == "select_all_ranks":
        selected_ranks = list(ranks)
        games_ranks[game_name] = selected_ranks
        await state.update_data(games_ranks=games_ranks)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥–∏ –¥–ª—è –∏–≥—Ä—ã <b>{game_name}</b> (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=get_ranks_keyboard(game_name, ranks, selected_ranks)
        )
        await callback.answer()
        return

    if callback.data.startswith("toggle_rank_"):
        rank = callback.data.replace("toggle_rank_", "")
        if rank in selected_ranks:
            selected_ranks.remove(rank)
        else:
            selected_ranks.append(rank)
        games_ranks[game_name] = selected_ranks
        await state.update_data(games_ranks=games_ranks)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥–∏ –¥–ª—è –∏–≥—Ä—ã <b>{game_name}</b> (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            parse_mode="HTML",
            reply_markup=get_ranks_keyboard(game_name, ranks, selected_ranks)
        )
        await callback.answer()
        return

    if callback.data == "ranks_done":
        if idx + 1 < len(selected_games):
            next_idx = idx + 1
            next_game = selected_games[next_idx]
            next_game_obj = await get_game_by_name(next_game)
            next_ranks = next_game_obj.get("ranks", []) if next_game_obj else []
            await state.update_data(current_game_idx=next_idx)
            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥–∏ –¥–ª—è –∏–≥—Ä—ã <b>{next_game}</b> (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                parse_mode="HTML",
                reply_markup=get_ranks_keyboard(next_game, next_ranks, games_ranks.get(next_game, []))
            )
            await callback.answer()
        else:
            await update_filter(
                callback.from_user.id,
                {
                    "games": selected_games,
                    "games_ranks": games_ranks
                }
            )
            await state.clear()
            await callback.message.edit_text(
                "‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –∏–≥—Ä–∞–º –∏ —Ä–∞–Ω–≥–∞–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
                reply_markup=settings_kb,
                parse_mode="HTML"
            )
            await callback.answer()

@router.callback_query(F.data == "reset_filter")
async def reset_filter_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await reset_filter(user_id)
    await state.clear()
    await callback.message.edit_text(
        "üîÑ –§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        parse_mode="HTML",
        reply_markup=settings_kb
    )
    await callback.answer()


@router.callback_query(F.data == "edit_filter_gender")
async def edit_filter_gender(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–õ—é–±–æ–π", callback_data="gender_any"),
                InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
                InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_filter")]
        ]
    )
    await callback.message.edit_text(
        "üßë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ–∏—Å–∫–µ:</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.in_(["gender_any", "gender_male", "gender_female"]))
async def set_filter_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.replace("gender_", "")
    await update_filter(callback.from_user.id, {"gender": gender})
    await callback.message.edit_text(
        "‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É –æ–±–Ω–æ–≤–ª—ë–Ω.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_filters")]
            ]
        )
    )
    await callback.answer()

@router.callback_query(F.data == "edit_filter_age")
async def edit_filter_age(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_filter = await get_filter_by_user(user_id)
    selected_ranges = user_filter.get("age", []) if user_filter and isinstance(user_filter.get("age", []), list) else []
    await state.update_data(age_ranges=selected_ranges)
    await callback.message.edit_text(
        "üéÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ–∏—Å–∫–µ:</b>\n\n"
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.",
        parse_mode="HTML",
        reply_markup=get_age_filter_keyboard(selected_ranges)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_age_"))
async def toggle_age_range(callback: CallbackQuery, state: FSMContext):
    AGE_RANGES = [
    ("10-19", [10, 19]),
    ("20-29", [20, 29]),
    ("30-39", [30, 39]),
    ("40-49", [40, 49]),
    ("50-59", [50, 59]),
    ("60+", [60, 120]),
    ]

    label = callback.data.replace("toggle_age_", "")
    age_range = next((r for l, r in AGE_RANGES if l == label), None)
    data = await state.get_data()
    selected_ranges = data.get("age_ranges", [])
    if age_range in selected_ranges:
        selected_ranges.remove(age_range)
    else:
        selected_ranges.append(age_range)
    await state.update_data(age_ranges=selected_ranges)
    await callback.message.edit_text(
        "üéÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ–∏—Å–∫–µ:</b>\n\n"
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.",
        parse_mode="HTML",
        reply_markup=get_age_filter_keyboard(selected_ranges)
    )
    await callback.answer()

@router.callback_query(F.data == "age_done")
async def set_filter_age(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ranges = data.get("age_ranges", [])
    if selected_ranges:
        min_age = min(r[0] for r in selected_ranges)
        max_age = max(r[1] for r in selected_ranges)
        age_filter = [min_age, max_age]
    else:
        age_filter = "any"
    await update_filter(callback.from_user.id, {"age": age_filter})
    await callback.message.edit_text(
        "‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –æ–±–Ω–æ–≤–ª—ë–Ω.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_filters")]
            ]
        )
    )
    await callback.answer()
