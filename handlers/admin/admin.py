from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config import ADMIN_ID
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bson import ObjectId



from keyboards.admin_keyboards import *

from database.users import *
from database.games import *

from FSM.all import *

router = Router()

@router.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await callback.message.edit_text(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_panel_kb
    )

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_panel_kb
    )

@router.callback_query(F.data == "admin_games")
async def admin_games_menu(callback: CallbackQuery, state):
    await callback.message.edit_text(
        "üïπ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä.",
        parse_mode="HTML",
        reply_markup=admin_games_kb
    )
    await callback.answer()

@router.callback_query(F.data == "admin_add_game")
async def admin_add_game_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb()
    )
    await state.set_state(AddGameFSM.waiting_for_name)
    await callback.answer()

@router.message(AddGameFSM.waiting_for_name)
async def admin_add_game_name(message: Message, state: FSMContext):
    await state.update_data(game_name=message.text)
    genres = await get_all_genres()
    if not genres:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∂–∞–Ω—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞–º–∏.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=genre.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), callback_data=f"select_genre_{str(genre['_id'])}")]
            for genre in genres
        ]
    )

    await message.answer(
        "üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è –∏–≥—Ä—ã</b> —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await state.set_state(AddGameFSM.waiting_for_genre)

@router.callback_query(F.data.startswith("select_genre_"))
async def admin_add_game_select_genre(callback: CallbackQuery, state: FSMContext):
    genre_id = callback.data.split("_", 2)[2]
    from database.games import get_genre_by_id
    genre = await get_genre_by_id(genre_id)
    if not genre:
        await callback.answer("‚ùóÔ∏è –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(genre=genre.get("name"))
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã</b> (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ - ):",
        parse_mode="HTML"
    )
    await state.set_state(AddGameFSM.waiting_for_description)
    await callback.answer()


@router.message(AddGameFSM.waiting_for_genre)
async def admin_add_game_genre(message: Message, state: FSMContext):
    genre = message.text if message.text != "-" else None
    await state.update_data(genre=genre)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã</b> (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ - ):", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(AddGameFSM.waiting_for_description)

@router.message(AddGameFSM.waiting_for_description)
async def admin_add_game_description(message: Message, state: FSMContext):
    description = message.text if message.text != "-" else None
    await state.update_data(description=description)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–≥–æ–≤</b> –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã (—á–∏—Å–ª–æ):", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(AddGameFSM.waiting_for_ranks_count)

@router.message(AddGameFSM.waiting_for_ranks_count)
async def admin_add_game_ranks_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 0 or count > 50:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–¥–æ 50).",
        reply_markup=get_cancel_to_games_kb())
        return
    await state.update_data(ranks_count=count, ranks=[], current_rank=1)
    if count == 0:
        data = await state.get_data()
        result = await add_game(
            game_name=data.get("game_name"),
            genre=data.get("genre"),
            description=data.get("description"),
            ranks=[]
        )
        if result.get("success"):
            await message.answer("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason')}")
        await state.clear()
        return
    await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ ‚Ññ1 (–æ—Ç —Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ –∫ —Å–∞–º–æ–º—É –≤—ã—Å–æ–∫–æ–º—É):",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(AddGameFSM.waiting_for_rank_name)

@router.message(AddGameFSM.waiting_for_rank_name)
async def admin_add_game_rank_name(message: Message, state: FSMContext):
    data = await state.get_data()
    ranks = data.get("ranks", [])
    ranks.append(message.text)
    current_rank = data.get("current_rank", 1)
    ranks_count = data.get("ranks_count", 0)
    await state.update_data(ranks=ranks, current_rank=current_rank + 1)
    if len(ranks) < ranks_count:
        await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ ‚Ññ{len(ranks)+1} (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é):",
        reply_markup=get_cancel_to_games_kb())
        return
    data = await state.get_data()
    result = await add_game(
        game_name=data.get("game_name"),
        genre=data.get("genre"),
        description=data.get("description"),
        ranks=ranks
    )
    if result.get("success"):
        await message.answer("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason')}")
    await state.clear()


@router.callback_query(F.data == "admin_show_games")
async def admin_show_games(callback: CallbackQuery, state: FSMContext):
    games = await get_all_games()
    if not games:
        await callback.message.edit_text("‚ùóÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã.", parse_mode="HTML")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=game.get("game_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), callback_data=f"game_{str(game['_id'])}")]
            for game in games
        ] + [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_games")]
        ]
    )

    await callback.message.edit_text(
        "üéÆ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–≥—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("game_"))
async def admin_game_detail(callback: CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", 1)[1]
    game = await get_game_by_id(ObjectId(game_id))
    if not game:
        await callback.message.edit_text("‚ùóÔ∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        await callback.answer()
        return

    text = (
        f"üéÆ <b>{game.get('game_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"üóÇ <b>–ñ–∞–Ω—Ä:</b> {game.get('genre', '‚Äî')}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {game.get('description', '‚Äî')}"
    )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_game_manage_kb(game_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete_game_"))
async def admin_delete_game(callback: CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", 3)[3]
    result = await delete_game(game_id)
    if result:
        await callback.message.edit_text("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", parse_mode="HTML")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã.", parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("admin_edit_game_"))
async def admin_edit_game_start(callback: CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", 3)[3]
    game = await get_game_by_id(ObjectId(game_id))
    if not game:
        await callback.message.edit_text("‚ùóÔ∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        await callback.answer()
        return
    await state.update_data(game_id=game_id)
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{game.get('game_name', '‚Äî')}</b>\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb()
    )
    await state.set_state(EditGameFSM.waiting_for_name)
    await callback.answer()

@router.message(EditGameFSM.waiting_for_name)
async def admin_edit_game_name(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("üóÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∂–∞–Ω—Ä –∏–ª–∏ <code>-</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(EditGameFSM.waiting_for_genre)

@router.message(EditGameFSM.waiting_for_genre)
async def admin_edit_game_genre(message: Message, state: FSMContext):
    await state.update_data(new_genre=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ <code>-</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(EditGameFSM.waiting_for_description)

@router.message(EditGameFSM.waiting_for_description)
async def admin_edit_game_description(message: Message, state: FSMContext):
    data = await state.get_data()
    game_id = data.get("game_id")
    update_data = {}

    if data.get("new_name") != "-":
        update_data["game_name"] = data.get("new_name")
    if data.get("new_genre") != "-":
        update_data["genre"] = data.get("new_genre")
    if message.text != "-":
        update_data["description"] = message.text

    if not update_data:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        await state.clear()
        return

    from database.games import update_game
    result = await update_game(ObjectId(game_id), update_data)
    if result:
        await message.answer("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=get_cancel_to_games_kb())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã.")
    await state.clear()

@router.callback_query(F.data.startswith("admin_edit_ranks_"))
async def admin_edit_ranks_start(callback: CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", 3)[3]
    game = await get_game_by_id(ObjectId(game_id))
    if not game:
        await callback.message.edit_text("‚ùóÔ∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        await callback.answer()
        return
    await state.update_data(game_id=game_id)
    await callback.message.edit_text(
        f"üèÜ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∏–≥—Ä—ã:</b> <b>{game.get('game_name', '‚Äî')}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ä–∞–Ω–≥–∏: {', '.join(game.get('ranks', [])) or '‚Äî'}\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–≥–æ–≤</b> –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã (—á–∏—Å–ª–æ):",
        parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb()
    )
    await state.set_state(EditRanksFSM.waiting_for_ranks_count)
    await callback.answer()

@router.message(EditRanksFSM.waiting_for_ranks_count)
async def admin_edit_ranks_count(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 0 or count > 50:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–¥–æ 50).",
        reply_markup=get_cancel_to_games_kb())
        return
    await state.update_data(ranks_count=count, ranks=[], current_rank=1)
    if count == 0:
        data = await state.get_data()
        from database.games import update_game
        result = await update_game(ObjectId(data.get("game_id")), {"ranks": []})
        if result:
            await message.answer("‚úÖ –†–∞–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—É–¥–∞–ª–µ–Ω—ã)!",
            reply_markup=get_cancel_to_games_kb())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–Ω–≥–æ–≤.")
        await state.clear()
        return
    await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ ‚Ññ1 (–æ—Ç —Å–∞–º–æ–≥–æ –Ω–∏–∑–∫–æ–≥–æ –∫ —Å–∞–º–æ–º—É –≤—ã—Å–æ–∫–æ–º—É):")
    await state.set_state(EditRanksFSM.waiting_for_rank_name)

@router.message(EditRanksFSM.waiting_for_rank_name)
async def admin_edit_ranks_name(message: Message, state: FSMContext):
    data = await state.get_data()
    ranks = data.get("ranks", [])
    ranks.append(message.text)
    current_rank = data.get("current_rank", 1)
    ranks_count = data.get("ranks_count", 0)
    await state.update_data(ranks=ranks, current_rank=current_rank + 1)
    if len(ranks) < ranks_count:
        await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–Ω–≥–∞ ‚Ññ{len(ranks)+1} (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é):",
        reply_markup=get_cancel_to_games_kb())
        return
    data = await state.get_data()
    from database.games import update_game
    result = await update_game(ObjectId(data.get("game_id")), {"ranks": ranks})
    if result:
        await message.answer("‚úÖ –†–∞–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=get_cancel_to_games_kb())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–Ω–≥–æ–≤.")
    await state.clear()

@router.callback_query(F.data == "admin_add_genre")
async def admin_add_genre_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞</b>:",
        parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb()
    )
    await state.set_state(AddGenreFSM.waiting_for_name)
    await callback.answer()

@router.message(AddGenreFSM.waiting_for_name)
async def admin_add_genre_name(message: Message, state: FSMContext):
    await state.update_data(genre_name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞</b> (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ - ):", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(AddGenreFSM.waiting_for_description)

@router.message(AddGenreFSM.waiting_for_description)
async def admin_add_genre_description(message: Message, state: FSMContext):
    description = message.text if message.text != "-" else ""
    data = await state.get_data()
    from database.games import add_genre
    result = await add_genre(data.get("genre_name"), description)
    if result.get("success"):
        await message.answer("‚úÖ –ñ–∞–Ω—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result.get('reason')}")
    await state.clear()

@router.callback_query(F.data == "admin_show_genres")
async def admin_show_genres(callback: CallbackQuery, state: FSMContext):
    from database.games import get_all_genres
    genres = await get_all_genres()
    if not genres:
        await callback.message.edit_text("‚ùóÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞.", parse_mode="HTML")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=genre.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), callback_data=f"genre_{str(genre['_id'])}")]
            for genre in genres
        ] + [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_games")]
        ]
    )

    await callback.message.edit_text(
        "üé≠ <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("genre_"))
async def admin_genre_detail(callback: CallbackQuery, state: FSMContext):
    genre_id = callback.data.split("_", 1)[1]
    from database.games import get_genre_by_id
    genre = await get_genre_by_id(genre_id)
    if not genre:
        await callback.message.edit_text("‚ùóÔ∏è –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        await callback.answer()
        return

    text = (
        f"üé≠ <b>{genre.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {genre.get('description', '‚Äî')}"
    )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_genre_manage_kb(genre_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_edit_genre_"))
async def admin_edit_genre_start(callback: CallbackQuery, state: FSMContext):
    genre_id = callback.data.split("_", 3)[3]
    from database.games import get_genre_by_id
    genre = await get_genre_by_id(genre_id)
    if not genre:
        await callback.message.edit_text("‚ùóÔ∏è –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        await callback.answer()
        return
    await state.update_data(genre_id=genre_id)
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{genre.get('name', '‚Äî')}</b>\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb()
    )
    await state.set_state(EditGenreFSM.waiting_for_name)
    await callback.answer()

@router.message(EditGenreFSM.waiting_for_name)
async def admin_edit_genre_name(message: Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ <code>-</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    await state.set_state(EditGenreFSM.waiting_for_description)

@router.message(EditGenreFSM.waiting_for_description)
async def admin_edit_genre_description(message: Message, state: FSMContext):
    data = await state.get_data()
    genre_id = data.get("genre_id")
    update_data = {}
    if data.get("new_name") != "-":
        update_data["name"] = data.get("new_name")
    if message.text != "-":
        update_data["description"] = message.text

    if not update_data:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        await state.clear()
        return

    from database.games import update_genre
    result = await update_genre(genre_id, update_data)
    if result:
        await message.answer("‚úÖ –ñ–∞–Ω—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=get_cancel_to_games_kb())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞.")
    await state.clear()

@router.callback_query(F.data.startswith("admin_delete_genre_"))
async def admin_delete_genre(callback: CallbackQuery, state: FSMContext):
    genre_id = callback.data.split("_", 3)[3]
    from database.games import delete_genre
    result = await delete_genre(genre_id)
    if result:
        await callback.message.edit_text("‚úÖ –ñ–∞–Ω—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", parse_mode="HTML",
        reply_markup=get_cancel_to_games_kb())
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–Ω—Ä–∞.", parse_mode="HTML")
    await callback.answer()