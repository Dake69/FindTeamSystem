from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from FSM.all import RegistrationInline

from keyboards.reg import *

from database.users import *

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = await get_user_by_id(message.from_user.id)
    if user:
        await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n"
            "üéÆ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ FindTeamBot!\n"
            "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–æ–∫, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –º–µ—á—Ç—ã! üèÜ\n\n"
            "üè† <b>–í—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.</b>",
            parse_mode="HTML",
            reply_markup=main_menu_inline_kb
        )
        return
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FindTeamBot!</b>\n\n"
        "üìù –î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–º–º–µ–π—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:",
        parse_mode="HTML"
    )
    await state.set_state(RegistrationInline.full_name)

@router.message(RegistrationInline.full_name, F.text)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–∏–∫–Ω–µ–π–º</b>:", parse_mode="HTML")
    await state.set_state(RegistrationInline.nickname)

@router.message(RegistrationInline.nickname, F.text)
async def get_nickname(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≤–æ–∑—Ä–∞—Å—Ç</b>:", parse_mode="HTML")
    await state.set_state(RegistrationInline.age)

@router.message(RegistrationInline.age, F.text)
async def get_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 10 or age > 99:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-99):")
        return
    await state.update_data(age=age)
    await message.answer("üßë –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à <b>–ø–æ–ª</b>:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
             InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
    ), parse_mode="HTML")
    await state.set_state(RegistrationInline.gender)

@router.callback_query(RegistrationInline.gender, F.data.startswith("gender_"))
async def get_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    await state.update_data(gender=gender)
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–≥–æ—Ä–æ–¥</b>:", parse_mode="HTML")
    await state.set_state(RegistrationInline.city)
    await callback.answer()

@router.message(RegistrationInline.city, F.text)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ <b>–∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ</b> (–±–∏–æ):", parse_mode="HTML")
    await state.set_state(RegistrationInline.about)

@router.message(RegistrationInline.about, F.text)
async def get_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:",
        reply_markup=contact_kb,
        parse_mode="HTML"
    )
    await state.set_state(RegistrationInline.phone)

@router.message(RegistrationInline.phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä (–Ω–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏):",
        reply_markup=await get_games_keyboard([]),
        parse_mode="HTML"
    )
    await state.set_state(RegistrationInline.game)

@router.callback_query(RegistrationInline.game, F.data)
async def choose_games(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_games = data.get("games", [])
    if callback.data.startswith("game_"):
        game = callback.data[5:]
        if game in selected_games:
            selected_games.remove(game)
        else:
            selected_games.append(game)
        await state.update_data(games=selected_games)
        await callback.message.edit_text(
            "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä (–Ω–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏):",
            reply_markup=await get_games_keyboard(selected_games),
            parse_mode="HTML"
        )
    elif callback.data == "games_done":
        if not selected_games:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É!", show_alert=True)
            return
        data = await state.get_data()
        result = await add_user(
            user_id=callback.from_user.id,
            full_name=data.get('full_name'),
            nickname=data.get('nickname'),
            age=data.get('age'),
            gender=data.get('gender'),
            city=data.get('city'),
            about=data.get('about'),
            phone=data.get('phone'),
            games=selected_games,
            username=callback.from_user.username
        )
        if result.get("success"):
            await callback.message.edit_text(
                "<b>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {data.get('full_name')}\n"
                f"üè∑Ô∏è <b>–ù–∏–∫–Ω–µ–π–º:</b> {data.get('nickname')}\n"
                f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data.get('age')}\n"
                f"üßë <b>–ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if data.get('gender') == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
                f"üèô <b>–ì–æ—Ä–æ–¥:</b> {data.get('city')}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
                f"üéÆ <b>–ò–≥—Ä—ã:</b> {', '.join(selected_games)}\n"
                f"üìù <b>–û —Å–µ–±–µ:</b> {data.get('about')}",
                parse_mode="HTML",
                reply_markup=main_menu_inline_kb
            )
        else:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result.get('reason')}",
                parse_mode="HTML"
            )
        await state.clear()